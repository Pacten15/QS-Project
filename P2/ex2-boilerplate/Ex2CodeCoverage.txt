/home/luis/Desktop/Especificacao_de_Software /Projeto/QS_23-24/P2/ex2-boilerplate/Ex3ConcTestSuite/addConcreteTest.c:
    1|       |#include <stdlib.h>
    2|       |#include <stdio.h>
    3|       |#include "assert.h"
    4|       |#include "../treetable.h"
    5|       |//#include "../treetable.c"
    6|       |
    7|       |
    8|       |
    9|       |
   10|      3|void add_test_template(int key1,int key2, char value1, char value2) {
   11|      3|    TreeTable *table;
   12|      3|    treetable_new(&table);
   13|       |
   14|       |    // Test adding three key-value pairs
   15|      3|    enum cc_stat status1 = treetable_add(table, &key1, &value1);
   16|      3|    enum cc_stat status2 = treetable_add(table, &key2, &value2);
   17|       |
   18|      3|    if( status1 == CC_OK && status2 == CC_OK){
   19|      3|        assert(treetable_contains_key(table, &key1));
   20|      3|        assert(treetable_contains_key(table, &key2));
   21|      3|        assert(treetable_contains_value(table, &value2) >= 1);     
   22|      3|    }
   23|       |    
   24|      3|    treetable_destroy(table);
   25|       |  
   26|      3|}
   27|       |
   28|       |/**
   29|       |
   30|       |int main() {
   31|       |
   32|       |    char dot = '.';
   33|       |    add_test_template(0,0,dot,dot);
   34|       |    add_test_template(1,0,dot,dot);
   35|       |    add_test_template(-2013265920, 0, dot, dot);
   36|       |}
   37|       |**/
   38|       |
   39|       |
   40|       |

/home/luis/Desktop/Especificacao_de_Software /Projeto/QS_23-24/P2/ex2-boilerplate/Ex3ConcTestSuite/alltestsTogether.c:
    1|       |#include <stdlib.h>
    2|       |#include <stdio.h>
    3|       |#include "assert.h"
    4|       |#include "../treetable.h"
    5|       |#include "../treetable.c"
    6|       |#include"addConcreteTest.c"
    7|       |#include"getConcreteTest.c"
    8|       |#include"getGreaterConcreteTest.c"
    9|       |#include "firstKeyConcreteTest.c"
   10|       |
   11|       |
   12|      1|int main() {
   13|      1|    char dot = '.';
   14|      1|    add_test_template(0,0,dot,dot);
   15|      1|    add_test_template(1,0,dot,dot);
   16|      1|    add_test_template(-2013265920, 0, dot, dot);
   17|      1|    first_key_test_template(0,0,0,"........","........","........");
   18|      1|    first_key_test_template(0, -2147483648, 0,"........","........","........");
   19|      1|    first_key_test_template(16777216, 16777216, 0,"........","........","........");
   20|      1|    first_key_test_template(-2147483646, -2147483648, 0,"........","........","........");
   21|      1|    first_key_test_template(-2130706432, -2130706432, 0,"........","........","........");
   22|      1|    first_key_test_template(0, 16777216, 0,"........","........","........");
   23|      1|    first_key_test_template(1, 0, 0,"........","........","........");
   24|      1|    first_key_test_template(1, 16777216, 0,"........","........","........");
   25|      1|    first_key_test_template(33554432, 16777216, 0,"........","........","........");
   26|      1|    first_key_test_template(-2013265920, 0, 0,"........","........","........");
   27|      1|    first_key_test_template(2, -2013265920, 0,"........","........","........");
   28|      1|    first_key_test_template(-2147483616, -1073741824, 0,"........","........","........");
   29|      1|    first_key_test_template(-2130706432, 16777216, 0,"........","........","........");
   30|      1|    get_test_template(0,0,dot,dot);
   31|      1|    get_test_template(1,0, dot,dot);
   32|      1|    get_test_template(-2013265920, 0, dot, dot);
   33|      1|    get_greater_test_template(0,0,0,"........","........","........");
   34|      1|    get_greater_test_template(0,-2147483648,0,"........","........","........");
   35|      1|    get_greater_test_template(16777216,16777216,0,"........","........","........");
   36|      1|    get_greater_test_template(1,0,0,"........","........","........");
   37|      1|    get_greater_test_template(-2147483646,-2147483648,0,"........","........","........");
   38|      1|    get_greater_test_template(-2130706432,-2130706432,0,"........","........","........");
   39|      1|    get_greater_test_template(33554432,16777216,0,"........","........","........");
   40|      1|    get_greater_test_template(0,16777216,0,"........","........","........");
   41|      1|    get_greater_test_template(2,-2013265920,0,"........","........","........");
   42|      1|    get_greater_test_template(1,16777216,0,"........","........","........");
   43|      1|    get_greater_test_template(-2013265920,0,0,"........","........","........");
   44|      1|    get_greater_test_template(-2147483616,-1073741824,0,"........","........","........");
   45|      1|    get_greater_test_template(-2130706432,16777216,0,"........","........","........");
   46|       |    
   47|      1|}

/home/luis/Desktop/Especificacao_de_Software /Projeto/QS_23-24/P2/ex2-boilerplate/Ex3ConcTestSuite/firstKeyConcreteTest.c:
    1|       |#include <stdlib.h>
    2|       |#include <stdio.h>
    3|       |#include "assert.h"
    4|       |#include "../treetable.h"
    5|       |
    6|       |
    7|     13|void first_key_test_template(int key1,int key2,int key3, char value1[], char value2[], char value3[]) {
    8|     13|    TreeTable *table;
    9|     13|    treetable_new(&table);
   10|       |    
   11|     13|    treetable_add(table, &key1, value1);
   12|     13|    treetable_add(table, &key2, value2);
   13|     13|    treetable_add(table, &key3, value3);
   14|       |    
   15|       |   
   16|       |     
   17|     13|    void* out;
   18|     13|    enum cc_stat status = treetable_get_first_key(table, &out);
   19|     13|    int* int_ptr = (int*)out; // cast void* to int*
   20|     13|    int dereferenced_value = *int_ptr;
   21|     13|    if(status == CC_OK){
   22|     13|        if(key1 < key2 && key1 < key3){
                                        ^5
   23|      3|            assert(dereferenced_value == key1);
   24|      3|        }
   25|     10|    else if(key2 < key1 && key2 < key3){
                                         ^5
   26|      3|        assert(dereferenced_value == key2);
   27|      3|        }
   28|      7|    else if(key3 < key1 && key3 < key2){
                                         ^4
   29|      3|        assert(dereferenced_value == key3);
   30|      3|    }
   31|     13|    }
   32|     13|    treetable_destroy(table);
   33|       |  
   34|     13|}
   35|       |
   36|       |/**
   37|       |int main() {
   38|       |
   39|       |    test_template(0,0,0,"........","........","........");
   40|       |    test_template(0, -2147483648, 0,"........","........","........");
   41|       |    test_template(16777216, 16777216, 0,"........","........","........");
   42|       |    test_template(-2147483646, -2147483648, 0,"........","........","........");
   43|       |    test_template(-2130706432, -2130706432, 0,"........","........","........");
   44|       |    test_template(0, 16777216, 0,"........","........","........");
   45|       |    test_template(1, 0, 0,"........","........","........");
   46|       |    test_template(1, 16777216, 0,"........","........","........");
   47|       |    test_template(33554432, 16777216, 0,"........","........","........");
   48|       |    test_template(-2013265920, 0, 0,"........","........","........");
   49|       |    test_template(2, -2013265920, 0,"........","........","........");
   50|       |    test_template(-2147483616, -1073741824, 0,"........","........","........");
   51|       |    test_template(-2130706432, 16777216, 0,"........","........","........");
   52|       |
   53|       |
   54|       |}
   55|       |**/

/home/luis/Desktop/Especificacao_de_Software /Projeto/QS_23-24/P2/ex2-boilerplate/Ex3ConcTestSuite/getConcreteTest.c:
    1|       |#include <stdlib.h>
    2|       |#include <stdio.h>
    3|       |#include "assert.h"
    4|       |#include "../treetable.h"
    5|       |//#include "../treetable.c"
    6|       |
    7|       |
    8|      3|void get_test_template(int key1,int key2, char value1, char value2) {
    9|      3|    TreeTable *table;
   10|      3|    treetable_new(&table);
   11|       |
   12|      3|    void* out;
   13|      3|    enum cc_stat status = treetable_get(table, &key1, &out);
   14|      3|    assert(status == CC_ERR_KEY_NOT_FOUND);
   15|       |    
   16|       |    // Test adding a single key-value pair
   17|      3|    treetable_add(table, &key1, &value1);
   18|      3|    assert(treetable_contains_key(table, &key1));
   19|      3|    void* value;
   20|      3|    treetable_get(table, &key1, &value);
   21|      3|    char* int_ptr1 = (char*)value; // cast void* to char*
   22|      3|    char dereferenced_value1 = *int_ptr1;
   23|      3|    assert(dereferenced_value1 == value1);
   24|       |
   25|       |    // Test adding a second key-value pair
   26|      3|    treetable_add(table, &key2, &value2);
   27|      3|    assert(treetable_contains_key(table, &key2));
   28|      3|    treetable_get(table, &key2, &value);
   29|      3|    char* int_ptr2 = (char*)value; // cast void* to char*
   30|      3|    char dereferenced_value2 = *int_ptr2;
   31|      3|    assert(dereferenced_value2 == value2);
   32|       |
   33|      3|    treetable_destroy(table);
   34|      3|}
   35|       |
   36|       |/**
   37|       |int main() {
   38|       |
   39|       |    char dot = '.';
   40|       |    get_test_template(0,0,dot,dot);
   41|       |    get_test_template(1,0, dot,dot);
   42|       |    get_test_template(-2013265920, 0, dot, dot);
   43|       |  
   44|       |}
   45|       |**/

/home/luis/Desktop/Especificacao_de_Software /Projeto/QS_23-24/P2/ex2-boilerplate/Ex3ConcTestSuite/getGreaterConcreteTest.c:
    1|       |#include <stdlib.h>
    2|       |#include <stdio.h>
    3|       |#include "assert.h"
    4|       |#include "../treetable.h"
    5|       |//#include "../treetable.c"
    6|       |
    7|       |
    8|     13|void get_greater_test_template(int key1,int key2,int key3, char value1[], char value2[], char value3[]) {
    9|     13|    TreeTable *table;
   10|     13|    treetable_new(&table);
   11|       |
   12|     13|    void* greater_key_2;
   13|     13|    enum cc_stat status1 = treetable_get_greater_than(table, &key1, &greater_key_2);
   14|     13|    assert(status1 == CC_ERR_KEY_NOT_FOUND);
   15|       |
   16|       |    
   17|     13|    treetable_add(table, &key1, value1);
   18|     13|    treetable_add(table, &key2, value2);
   19|     13|    treetable_add(table, &key3, value3);
   20|       |    
   21|       |   
   22|       |     
   23|     13|    void* greater_key;
   24|     13|    if(key1 < key2 || key1 < key3 ){
                                    ^8
   25|      7|        enum cc_stat status = treetable_get_greater_than(table, &key1, &greater_key);
   26|      7|        if(status == CC_OK ){
   27|      7|            int* int_ptr = (int*)greater_key; // cast void* to int*
   28|      7|            int dereferenced_value = *int_ptr;
   29|      7|            assert(dereferenced_value > key1);
   30|      7|        }
   31|      7|    }
   32|     13|    treetable_destroy(table);
   33|       |  
   34|     13|}
   35|       |
   36|       |
   37|       |/*
   38|       |int main() {
   39|       |    get_greater_test_template(0,0,0,"........","........","........");
   40|       |    get_greater_test_template(0,-2147483648,0,"........","........","........");
   41|       |    get_greater_test_template(16777216,16777216,0,"........","........","........");
   42|       |    get_greater_test_template(1,0,0,"........","........","........");
   43|       |    get_greater_test_template(-2147483646,-2147483648,0,"........","........","........");
   44|       |    get_greater_test_template(-2130706432,-2130706432,0,"........","........","........");
   45|       |    get_greater_test_template(33554432,16777216,0,"........","........","........");
   46|       |    get_greater_test_template(0,16777216,0,"........","........","........");
   47|       |    get_greater_test_template(2,-2013265920,0,"........","........","........");
   48|       |    get_greater_test_template(1,16777216,0,"........","........","........");
   49|       |    get_greater_test_template(-2013265920,0,0,"........","........","........");
   50|       |    get_greater_test_template(-2147483616,-1073741824,0,"........","........","........");
   51|       |    get_greater_test_template(-2130706432,16777216,0,"........","........","........");
   52|       |
   53|       |}
   54|       |*/

/home/luis/Desktop/Especificacao_de_Software /Projeto/QS_23-24/P2/ex2-boilerplate/treetable.c:
    1|       |/*
    2|       | * Collections-C
    3|       | * Copyright (C) 2013-2015 Srđan Panić <srdja.panic@gmail.com>
    4|       | *
    5|       | * This file is part of Collections-C.
    6|       | *
    7|       | * Collections-C is free software: you can redistribute it and/or modify
    8|       | * it under the terms of the GNU Lesser General Public License as published by
    9|       | * the Free Software Foundation, either version 3 of the License, or
   10|       | * (at your option) any later version.
   11|       | *
   12|       | * Collections-C is distributed in the hope that it will be useful,
   13|       | * but WITHOUT ANY WARRANTY; without even the implied warranty of
   14|       | * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
   15|       | * GNU Lesser General Public License for more details.
   16|       | *
   17|       | * You should have received a copy of the GNU Lesser General Public License
   18|       | * along with Collections-C. If not, see <http://www.gnu.org/licenses/>.
   19|       | */
   20|       |
   21|       |/* Tree operations are based on CLRS RB Tree. */
   22|       |
   23|       |#include "treetable.h"
   24|       |
   25|       |
   26|    112|#define RB_BLACK 1
   27|    104|#define RB_RED   0
   28|       |
   29|       |
   30|       |struct treetable_s {
   31|       |    RBNode *root;
   32|       |    RBNode *sentinel;
   33|       |    size_t  size;
   34|       |
   35|       |    int    (*cmp)        (const void *k1, const void *k2);
   36|       |    void  *(*mem_alloc)  (size_t size);
   37|       |    void  *(*mem_calloc) (size_t blocks, size_t size);
   38|       |    void   (*mem_free)   (void *block);
   39|       |};
   40|       |
   41|       |
   42|       |static void rotate_left            (TreeTable *table, RBNode *n);
   43|       |static void rotate_right           (TreeTable *table, RBNode *n);
   44|       |static void rebalance_after_insert (TreeTable *table, RBNode *n);
   45|       |static void tree_destroy           (TreeTable *table, RBNode *s);
   46|       |
   47|       |static INLINE RBNode *tree_min     (TreeTable const * const table, RBNode *n);
   48|       |static INLINE RBNode *tree_max     (TreeTable const * const table, RBNode *n);
   49|       |
   50|       |static RBNode *get_tree_node_by_key(TreeTable const * const table, const void *key);
   51|       |static RBNode *get_successor_node  (TreeTable const * const table, RBNode *x);
   52|       |
   53|    143|int cmp(void const *e1, void const *e2) {
   54|    143|    int i = *((int *)e1);
   55|    143|    int j = *((int *)e2);
   56|       |
   57|    143|    if (i < j)
   58|     51|        return -1;
   59|     92|    if (i == j)
   60|     43|        return 0;
   61|     49|    return 1;
   62|     92|}
   63|       |
   64|       |
   65|       |/**
   66|       | * Initializes the TreehTableConf structs fields to default values.
   67|       | *
   68|       | * @param[in] conf the struct that is being initialized
   69|       | */
   70|       |void treetable_conf_init(TreeTableConf *conf)
   71|     32|{
   72|     32|    conf->mem_alloc  = malloc;
   73|     32|    conf->mem_calloc = calloc;
   74|     32|    conf->mem_free   = free;
   75|     32|    conf->cmp        = cmp;
   76|     32|}
   77|       |
   78|       |/**
   79|       | * Creates a new TreeTable and returns a status code.
   80|       | *
   81|       | * @param[in] cmp the comparator used to order keys within the table
   82|       | * @param[out] out Pointer to where the newly created TreeTable is to be stored
   83|       | *
   84|       | * @return CC_OK if the creation was successful, or CC_ERR_ALLOC if the memory
   85|       | * allocation for the new TreeTable failed.
   86|       | */
   87|       |enum cc_stat treetable_new(TreeTable **tt)
   88|     32|{
   89|     32|    TreeTableConf conf;
   90|     32|    treetable_conf_init(&conf);
   91|     32|    return treetable_new_conf(&conf, tt);
   92|     32|}
   93|       |
   94|       |/**
   95|       | * Creates a new TreeTable based on the specified TreeTableConf struct and returns
   96|       | * a status code.
   97|       | *
   98|       | * The table is allocated using the memory allocators specified in the TreeTableConf
   99|       | * struct.
  100|       | *
  101|       | * @param[in] conf the TreeTableConf struct used to configure this new TreeTable
  102|       | * @param[out] out Pointer to where the newly created TreeTable is stored
  103|       | *
  104|       | * @return CC_OK if the creation was successful, or CC_ERR_ALLOC if the memory
  105|       | * allocation for the new TreeTable structure failed.
  106|       | */
  107|       |enum cc_stat treetable_new_conf(TreeTableConf const * const conf, TreeTable **tt)
  108|     32|{
  109|     32|    TreeTable *table = conf->mem_calloc(1, sizeof(TreeTable));
  110|       |
  111|     32|    if (!table)
  112|      0|        return CC_ERR_ALLOC;
  113|       |
  114|     32|    RBNode *sentinel = conf->mem_calloc(1, sizeof(RBNode));
  115|       |
  116|     32|    if (!sentinel) {
  117|      0|        conf->mem_free(table);
  118|      0|        return CC_ERR_ALLOC;
  119|      0|    }
  120|       |
  121|     32|    sentinel->color   = RB_BLACK;
  122|       |
  123|     32|    table->size       = 0;
  124|     32|    table->cmp        = conf->cmp;
  125|     32|    table->mem_alloc  = conf->mem_alloc;
  126|     32|    table->mem_calloc = conf->mem_calloc;
  127|     32|    table->mem_free   = conf->mem_free;
  128|     32|    table->root       = sentinel;
  129|     32|    table->sentinel   = sentinel;
  130|       |
  131|     32|    *tt = table;
  132|     32|    return CC_OK;
  133|     32|}
  134|       |
  135|       |/**
  136|       | * Destroys the sub-tree specified by the root node n.
  137|       | *
  138|       | * @param[in] table TreeTable to be destroyed.
  139|       | * @param[in] n root node of the sub tree that is being destroyed
  140|       | */
  141|       |static void tree_destroy(TreeTable *table, RBNode *n)
  142|    176|{
  143|    176|    if (n == table->sentinel)
  144|    104|        return;
  145|       |
  146|     72|    tree_destroy(table, n->left);
  147|     72|    tree_destroy(table, n->right);
  148|       |
  149|     72|    table->mem_free(n);
  150|     72|}
  151|       |
  152|       |/**
  153|       | * Destroys the specified TreeTable structure without destroying the the data
  154|       | * it holds. In other words the keys and the values are not freed, only the
  155|       | * table structure is.
  156|       | *
  157|       | * @param[in] table TreeTable to be destroyed.
  158|       | */
  159|       |void treetable_destroy(TreeTable *table)
  160|     32|{
  161|     32|    tree_destroy(table, table->root);
  162|       |
  163|     32|    table->mem_free(table->sentinel);
  164|     32|    table->mem_free(table);
  165|     32|}
  166|       |
  167|       |/**
  168|       | * Gets a value associated with the specified key and sets the out
  169|       | * parameter to it.
  170|       | *
  171|       | * @param[in] table the table from which the mapping is being returned
  172|       | * @param[in] key   the key that is being looked up
  173|       | * @param[out] out  Pointer to where the returned value is stored
  174|       | *
  175|       | * @return CC_OK if the key was found, or CC_ERR_KEY_NOT_FOUND if not.
  176|       | */
  177|       |enum cc_stat treetable_get(TreeTable const * const table, const void *key, void **out)
  178|      9|{
  179|      9|    RBNode *node = get_tree_node_by_key(table, key);
  180|       |
  181|      9|    if (!node)
  182|      3|        return CC_ERR_KEY_NOT_FOUND;
  183|       |
  184|      6|    *out = node->value;
  185|      6|    return CC_OK;
  186|      9|}
  187|       |
  188|       |
  189|       |/**
  190|       | * Returns the first (lowest) key in the table and sets the out parameter
  191|       | * to it.
  192|       | *
  193|       | * @param[in] table the table in which the lookup is performed
  194|       | * @param[out] out  Pointer to where the returned key is stored
  195|       | *
  196|       | * @return CC_OK if the key was found, or CC_ERR_KEY_NOT_FOUND if not.
  197|       | */
  198|       |enum cc_stat treetable_get_first_key(TreeTable const * const table, void **out)
  199|     13|{
  200|     13|    RBNode *node = tree_min(table, table->root);
  201|       |
  202|     13|    if (node != table->sentinel) {
  203|     13|        *out = node->key;
  204|     13|        return CC_OK;
  205|     13|    }
  206|      0|    return CC_ERR_KEY_NOT_FOUND;
  207|     13|}
  208|       |
  209|       |/**
  210|       | * Gets the immediate successor of the specified key and sets the out
  211|       | * parameter to its value.
  212|       | *
  213|       | * @param[in] table the table into which the lookup is performed
  214|       | * @param[in] key   the key whose successor is being returned
  215|       | * @param[out] out  Pointer to where the returned key is stored
  216|       | *
  217|       | * @return CC_OK if the key was found, or CC_ERR_KEY_NOT_FOUND if not.
  218|       | */
  219|       |enum cc_stat treetable_get_greater_than(TreeTable const * const table, const void *key, void **out)
  220|     20|{
  221|     20|    RBNode *n = get_tree_node_by_key(table, key);
  222|     20|    RBNode *s = get_successor_node(table, n);
  223|       |
  224|     20|    if (n && s) {
                           ^7
  225|      7|        *out = s->key;
  226|      7|        return CC_OK;
  227|      7|    }
  228|     13|    return CC_ERR_KEY_NOT_FOUND;
  229|     20|}
  230|       |
  231|       |/**
  232|       | * Returns the size of the specified TreeTable. Size of a TreeTable represents
  233|       | * the number of key-value mappings within the table.
  234|       | *
  235|       | * @param[in] table the table whose size is being returned
  236|       | *
  237|       | * @return the size of the table
  238|       | */
  239|       |size_t treetable_size(TreeTable const * const table)
  240|      0|{
  241|      0|    return table->size;
  242|      0|}
  243|       |
  244|       |/**
  245|       | * Checks whether or not the TreeTable contains the specified key.
  246|       | *
  247|       | * @param[in] table the table into which the lookup is performed
  248|       | * @param[in] key the key that is being looked up
  249|       | *
  250|       | * @return true if the table contains the key.
  251|       | */
  252|       |bool treetable_contains_key(TreeTable const * const table, const void *key)
  253|     12|{
  254|     12|    RBNode *node = get_tree_node_by_key(table, key);
  255|       |
  256|     12|    if (node)
  257|     12|        return true;
  258|       |
  259|      0|    return false;
  260|     12|}
  261|       |
  262|       |/**
  263|       | * Checks whether or not the TreeTable contains the specified value.
  264|       | *
  265|       | * @param[in] table the table into which the lookup is performed
  266|       | * @param[in] value the value that is being looked up
  267|       | *
  268|       | * @return number of occurrences of the specified value.
  269|       | */
  270|       |size_t treetable_contains_value(TreeTable const * const table, const void *value)
  271|      3|{
  272|      3|    RBNode *node = tree_min(table, table->root);
  273|       |
  274|      3|    size_t o = 0;
  275|      8|    while (node != table->sentinel) {
  276|      5|        if (node->value == value)
  277|      3|            o++;
  278|      5|        node = get_successor_node(table, node);
  279|      5|    }
  280|      3|    return o;
  281|      3|}
  282|       |
  283|       |
  284|       |/**
  285|       | * Creates a new key-value mapping in the specified TreeTable. If the unique key
  286|       | * is already mapped to a value in this table, that value is replaced with the
  287|       | * new value. This operation may fail if the space allocation for the new entry
  288|       | * fails.
  289|       | *
  290|       | * @param[in] table the table to which this new key-value mapping is being added
  291|       | * @param[in] key a tree table key used to access the specified value
  292|       | * @param[in] val a value that is being stored in the table
  293|       | *
  294|       | * @return CC_OK if the operation was successful, or CC_ERR_ALLOC if the memory
  295|       | * allocation for the new element failed.
  296|       | */
  297|       |enum cc_stat treetable_add(TreeTable *table, void *key, void *val) // 6 Paths
  298|     90|{
  299|     90|    RBNode *y = table->sentinel;
  300|     90|    RBNode *x = table->root;
  301|       |
  302|     90|    int cmp;
  303|    142|    while (x != table->sentinel) {
  304|     70|        cmp = table->cmp(key, x->key);
  305|     70|        y   = x;
  306|       |
  307|     70|        if (cmp < 0) {
  308|     26|            x = x->left;
  309|     44|        } else if (cmp > 0) {
  310|     26|            x = x->right;
  311|     26|        } else {
  312|     18|            x->value = val;
  313|     18|            return CC_OK;
  314|     18|        }
  315|     70|    }
  316|     72|    RBNode *n = table->mem_alloc(sizeof(RBNode));
  317|       |
  318|     72|    n->value  = val;
  319|     72|    n->key    = key;
  320|     72|    n->parent = y;
  321|     72|    n->left   = table->sentinel;
  322|     72|    n->right  = table->sentinel;
  323|       |
  324|     72|    table->size++;
  325|       |
  326|     72|    if (y == table->sentinel) {
  327|     32|        table->root = n;
  328|     32|        n->color    = RB_BLACK;
  329|     40|    } else {
  330|     40|        n->color = RB_RED;
  331|     40|        if (table->cmp(key, y->key) < 0) {
  332|     20|            y->left = n;
  333|     20|        } else {
  334|     20|            y->right = n;
  335|     20|        }
  336|     40|        rebalance_after_insert(table, n);
  337|     40|    }
  338|     72|    return CC_OK;
  339|     90|}
  340|       |
  341|       |/**
  342|       | * Rebalances the tale after an insert.
  343|       | *
  344|       | * @param[in] table TreeTable that is being rebalanced
  345|       | * @param[in] z Node that was inserted
  346|       | */
  347|       |static void rebalance_after_insert(TreeTable *table, RBNode *z)
  348|     40|{
  349|     40|    RBNode *y;
  350|       |
  351|     48|    while (z->parent->color == RB_RED) {
  352|      8|        if (z->parent == z->parent->parent->left) {
  353|      4|            y = z->parent->parent->right;
  354|      4|            if (y->color == RB_RED) {
  355|      0|                z->parent->color         = RB_BLACK;
  356|      0|                y->color                 = RB_BLACK;
  357|      0|                z->parent->parent->color = RB_RED;
  358|      0|                z = z->parent->parent;
  359|      4|            } else {
  360|      4|                if (z == z->parent->right) {
  361|      2|                    z = z->parent;
  362|      2|                    rotate_left(table, z);
  363|      2|                }
  364|      4|                z->parent->color         = RB_BLACK;
  365|      4|                z->parent->parent->color = RB_RED;
  366|      4|                rotate_right(table, z->parent->parent);
  367|      4|            }
  368|      4|        } else {
  369|      4|            y = z->parent->parent->left;
  370|      4|            if (y->color == RB_RED) {
  371|      0|                z->parent->color         = RB_BLACK;
  372|      0|                y->color                 = RB_BLACK;
  373|      0|                z->parent->parent->color = RB_RED;
  374|      0|                z = z->parent->parent;
  375|      4|            } else {
  376|      4|                if (z == z->parent->left) {
  377|      2|                    z = z->parent;
  378|      2|                    rotate_right(table, z);
  379|      2|                }
  380|      4|                z->parent->color         = RB_BLACK;
  381|      4|                z->parent->parent->color = RB_RED;
  382|      4|                rotate_left(table, z->parent->parent);
  383|      4|            }
  384|      4|        }
  385|      8|    }
  386|     40|    table->root->color = RB_BLACK;
  387|     40|}
  388|       |
  389|       |static INLINE RBNode *tree_min(TreeTable const * const table, RBNode *n)
  390|     22|{
  391|     22|    RBNode *s = table->sentinel;
  392|       |
  393|     32|    while (n->left != s)
  394|     10|        n = n->left;
  395|     22|    return n;
  396|     22|}
  397|       |
  398|       |static INLINE RBNode *tree_max(TreeTable const * const table, RBNode *n)
  399|      0|{
  400|      0|    RBNode *s = table->sentinel;
  401|      0|
  402|      0|    while (n->right != s)
  403|      0|        n = n->right;
  404|      0|    return n;
  405|      0|}
  406|       |
  407|       |/**
  408|       | * Performs a right rotation on the specified table's RB tree at root <code>
  409|       | * x</code>
  410|       | *
  411|       | * @param[in] table the table on which this operation is performed
  412|       | * @param[in] x the node around which this operation is performed
  413|       | */
  414|       |static void rotate_right(TreeTable *table, RBNode *x)
  415|      6|{
  416|      6|    RBNode *y = x->left;
  417|       |
  418|      6|    x->left = y->right;
  419|       |
  420|      6|    if (y->right != table->sentinel)
  421|      0|        y->right->parent = x;
  422|       |
  423|      6|    y->parent = x->parent;
  424|       |
  425|      6|    if (x->parent == table->sentinel)
  426|      4|        table->root = y;
  427|      2|    else if (x == x->parent->right)
  428|      2|        x->parent->right = y;
  429|      0|    else
  430|      0|        x->parent->left = y;
  431|       |
  432|      6|    y->right  = x;
  433|      6|    x->parent = y;
  434|      6|}
  435|       |
  436|       |/**
  437|       | * Performs a left rotation on the specified table's RB tree at root <code>
  438|       | * x</code>
  439|       | *
  440|       | * @param[in] table the table on which this operation is performed
  441|       | * @param[in] x the node around which this operation is performed
  442|       | */
  443|       |static void rotate_left(TreeTable *table, RBNode *x)
  444|      6|{
  445|      6|    RBNode *y = x->right;
  446|       |
  447|      6|    x->right = y->left;
  448|       |
  449|      6|    if (y->left != table->sentinel)
  450|      0|        y->left->parent = x;
  451|       |
  452|      6|    y->parent = x->parent;
  453|       |
  454|      6|    if (x->parent == table->sentinel)
  455|      4|        table->root = y;
  456|      2|    else if (x == x->parent->left)
  457|      2|        x->parent->left = y;
  458|      0|    else
  459|      0|        x->parent->right = y;
  460|       |
  461|      6|    y->left   = x;
  462|      6|    x->parent = y;
  463|      6|}
  464|       |
  465|       |/**
  466|       | * Returns a tree node associated with the specified key.
  467|       | *
  468|       | * @param[in] table the table on which this operation is performed
  469|       | * @param[in] key the key being looked up
  470|       | *
  471|       | * @return tree node associated with the key
  472|       | */
  473|       |static RBNode *get_tree_node_by_key(TreeTable const * const table, const void *key)
  474|     41|{
  475|     41|    if (table->size == 0)
  476|     16|        return NULL;
  477|       |
  478|     25|    RBNode *n = table->root;
  479|     25|    RBNode *s = table->sentinel;
  480|       |
  481|     25|    int cmp;
  482|     33|    do {
  483|     33|        cmp = table->cmp(key, n->key);
  484|       |
  485|     33|        if (cmp < 0)
  486|      5|            n = n->left;
  487|     28|        else if (cmp > 0)
  488|      3|            n = n->right;
  489|     25|        else
  490|     25|            return n;
  491|     33|    } while (n != s && cmp != 0);
                           ^8        ^8
  492|       |
  493|      0|    return NULL;
  494|     25|}
  495|       |
  496|       |/**
  497|       | * Returns a successor node of the node <code>x</code>
  498|       | *
  499|       | * @param[in] table the table on which this operation is performed
  500|       | * @param[in] x the node whose successor is being returned
  501|       | *
  502|       | * @return successor node of x
  503|       | */
  504|       |static RBNode *get_successor_node(TreeTable const * const table, RBNode *x)
  505|     25|{
  506|     25|    if (x == NULL)
  507|     13|        return NULL;
  508|       |
  509|     12|    if (x->right != table->sentinel)
  510|      6|        return tree_min(table, x->right);
  511|       |
  512|      6|    RBNode *y = x->parent;
  513|       |
  514|      7|    while (y != table->sentinel && x == y->right) {
                                                 ^4
  515|      1|        x = y;
  516|      1|        y = y->parent;
  517|      1|    }
  518|      6|    return y;
  519|     12|}
  520|       |

